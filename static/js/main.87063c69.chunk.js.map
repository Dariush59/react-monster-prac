{"version":3,"sources":["components/card/Card.js","components/card-list/CordList.js","components/search-box/SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CartList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","a","fetch","response","json","data","this","setState","searchField","feltredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,eACrB,6BAAML,EAAMI,QAAQE,OACpB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACSD,EAAMS,SAASC,KACZ,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCHjCM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SACIF,MC0CGG,E,kDA7Cb,aAAc,IAAD,8BACX,gBASKC,MAAQ,CACXR,SAAW,IAXF,E,4FAqBb,8BAAAS,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,gBAEqBA,EAASC,OAF9B,OAEQC,EAFR,OAGEC,KAAKC,SAAS,CACXf,SAAUa,EACVG,YAAa,KALlB,gD,0EAQA,WAAS,IAAD,SAC4BF,KAAKN,MAA/BR,EADF,EACEA,SAAUgB,EADZ,EACYA,YACZC,EAAkBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASJ,EAAYG,kBACnG,OACE,qBAAK3B,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,cAAC,EAAD,CAAWW,YAAY,SACrBC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAAEC,YAAaK,EAAEC,OAAOC,WAE5D,cAAC,EAAD,CAAUvB,SAAUiB,a,GAvCZO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.87063c69.chunk.js","sourcesContent":["import './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt=\"moster\" src={`https://robohash.org/${props.monster.id}?set=set2`} />\n        <h2 >{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n); \n    \n\n","import { Card } from '../card/Card';\nimport './card-list.styles.css';\n\nexport const CartList = props => (\n    <div className=\"card-list\">\n            {props.monsters.map(\n                monster => <Card key={monster.id} monster={monster} />\n            )}\n    </div>\n);","import './search-box.styles.css';\n\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n    <input \n        className='search'\n        type='search' \n        placeholder={placeholder}\n        onChange={\n            handleChange\n            // e => this.setState({ searchField: e.target.value }, ()=> console.log(this.state))\n            // e => {this.setState({ searchField: e.target.value }); console.log(this.state); }\n            // e =>  this.setState({ searchField: e.target.value })\n        } \n    />\n);","import './App.css';\nimport { Component } from 'react';\nimport { CartList } from './components/card-list/CordList';\nimport { SearchBox } from './components/search-box/SearchBox';\n\nclass App extends Component {\n  constructor(){\n    super();\n    // this.state = {\n    //   monsters: [\n    //     {name: 'dada', id:1 },\n    //     {name: 'rada', id:2 },\n    //     {name: 'nada', id:3 },\n    //     {name: 'sada', id:4 }\n    //   ]\n    // }; \n    this.state = { \n      monsters : []\n    }\n  }\n\n  // componentDidMount(){\n  //   fetch('https://jsonplaceholder.typicode.com/users')\n  //   .then(response => response.json())\n  //   .then(data => this.setState({ monsters: data }));\n  // }\n\n  async componentDidMount(){\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const data = await response.json();\n    this.setState({\n       monsters: data,\n       searchField: ''      \n      });\n  }\n  render(){\n    const { monsters, searchField } = this.state;\n    const feltredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <SearchBox placeholder='search' \n            handleChange= {e => this.setState({ searchField: e.target.value })}\n          />\n          <CartList monsters={feltredMonsters} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}